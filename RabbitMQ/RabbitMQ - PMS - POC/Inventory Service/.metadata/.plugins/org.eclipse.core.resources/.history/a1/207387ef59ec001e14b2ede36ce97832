package io.spring.rabbitmq.rmqinventoryservice.service;

import java.util.UUID;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import io.spring.rabbitmq.rmqinventoryservice.message.InventoryResponseMessage;
import io.spring.rabbitmq.rmqinventoryservice.message.OrderMessage;
import io.spring.rabbitmq.rmqinventoryservice.message.config.OrderConfirmationMessageConfig;
import io.spring.rabbitmq.rmqinventoryservice.message.config.OrderErrorMessageConfig;
import io.spring.rabbitmq.rmqinventoryservice.message.config.OrderMessageConfig;
import io.spring.rabbitmq.rmqinventoryservice.model.InventoryItem;
import io.spring.rabbitmq.rmqinventoryservice.repository.InventoryRepository;

@Service
public class OrderServiceListener {

	@Autowired
	private InventoryRepository inventoryRepository;

	@Autowired
	private RabbitTemplate template;

	@RabbitListener(queues = OrderMessageConfig.ORDER_STATUS_QUEUE)
	public void handleOrderMessage(OrderMessage message) {

		InventoryResponseMessage responseMessage = new InventoryResponseMessage();

		String requestedProductSkuCode = message.getSkuCode();
		InventoryItem requestedProduct = inventoryRepository.findInventoryItemBySkuCode(requestedProductSkuCode);

		int requestedQuantity = message.getQuantity();
		int availableQuantity = requestedProduct.getQuantity();

		if (requestedProduct == null || requestedQuantity <= 0 || availableQuantity < requestedQuantity) {

			responseMessage.setMessageId(UUID.randomUUID().toString());
			responseMessage.setMessage("Order [Order ID: " + message.getOrderId()
					+ " cannot be fulfilled at this time. We apologize for any inconvenience this may cause.");
			responseMessage.setOrderId(message.getOrderId());
			responseMessage.setFullfilable(false);

			template.convertAndSend(OrderErrorMessageConfig.ORDER_ERROR_QUEUE, responseMessage);

			System.out.println(responseMessage);
			System.out.println("your Order not Fullfillabale");

		} else {

			responseMessage.setMessageId(UUID.randomUUID().toString());
			responseMessage.setMessage("Your order [Order ID: " + message.getOrderId() + " is confirmed!");
			responseMessage.setOrderId(message.getOrderId());
			responseMessage.setFullfilable(true);

			template.convertAndSend(OrderConfirmationMessageConfig.ORDER_CONFIRMATION_QUEUE, responseMessage);
			System.out.println(responseMessage);
			System.out.println("Order Fullfillabale");
		}
	}

}
